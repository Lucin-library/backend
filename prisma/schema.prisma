generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user_accounts table
model user_account {
  id                     String              @id @default(uuid()) @map("id")
  email                  String?             @unique
  password               String?
  full_name              String?
  profile_picture_url    String?
  contact_info           String?
  birth_date             DateTime?
  gender                 Int?
  user_rating            rating[]            @relation("UserRating")
  bookmark               bookmark[]
  personal_bookshelf     bookshelf[]         @relation("PersonalbookShelf")
  user_favorite          favorite[]          @relation("Userfavorites")
  user_discussion_thread discussion_thread[] @relation("Userdiscussion_thread")
  user_histories         reading_history[]   @relation("UserReadingHistories")
  update_at              DateTime?           @updatedAt
  create_at              DateTime?           @default(now())
  delete_flag            Boolean?            @default(false)
}

// authors table
model author {
  id          String    @id @default(uuid()) @map("id")
  name        String
  birth_day   DateTime?
  biography   String?
  books       book[]    @relation("Authorbook")
  update_at   DateTime  @updatedAt
  create_at   DateTime  @default(now())
  delete_flag Boolean
}

// books table
model book {
  id                 String              @id @default(uuid()) @map("id")
  title              String
  author             author              @relation("Authorbook", fields: [author_id], references: [id])
  author_id          String
  genre              String?
  publisher          String?
  publication_date   DateTime?
  is_bn              String?
  description        String?
  cover_image_url    String?
  chapters           chapter[]
  user_rating        rating[]            @relation("BookRating")
  book_mark          bookmark[]
  book_personal      book_on_shelf[]     @relation("book_on_shelf")
  advertisement      advertisement[]     @relation("advertisements")
  favorites   favorite[] @relation("Bookfavorites")
  discussion_threads discussion_thread[] @relation("bookdiscussion_threads")
  book_histories     reading_history[]   @relation("bookReadingHistories")
  update_at          DateTime            @updatedAt
  delete_flag        Boolean             @default(false)
  create_at          DateTime            @default(now())
}

model chapter {
  id                String     @id @default(uuid()) @map("id")
  book_id           String
  chapter_number    Int
  title             String
  parent_chapter_id String?
  parent_chapter    chapter?   @relation("ChildChapters", fields: [parent_chapter_id], references: [id])
  child_chapters    chapter[]  @relation("ChildChapters")
  contents          contents[]
  book              book       @relation(fields: [book_id], references: [id])
  create_at         DateTime   @default(now())
  update_at         DateTime   @updatedAt
  delete_flag       Boolean    @default(false)

  @@index([book_id])
}

model contents {
  id          String   @id @default(uuid()) @map("id")
  chapter     chapter  @relation(fields: [chapter_id], references: [id])
  chapter_id  String
  content     String
  delete_flag Boolean  @default(false)
  create_at   DateTime @default(now())
  update_at   DateTime @updatedAt

  @@index([chapter_id])
}

// Userratings table
model rating {
  user_id     String
  book_id     String       
  rating      Float
  review_text String?
  date_rated  DateTime?
  update_at   DateTime     @updatedAt
  delete_flag Boolean      @default(false)
  book_rating book         @relation("BookRating", fields: [book_id], references: [id])
  user        user_account @relation("UserRating", fields: [user_id], references: [id])

  @@id([user_id, book_id])
}

// Personalbookshelf table
model bookshelf {
  id            String          @id @default(uuid()) @map("id")
  user          user_account    @relation("PersonalbookShelf", fields: [user_id], references: [id])
  user_id       String
  book_in_shelf book_on_shelf[] @relation("ShelfContain")
  book_id       String
  status        String?
  name          String?
  update_at     DateTime        @updatedAt
  create_at     DateTime        @default(now())
  delete_flag   Boolean         @default(false)
}

model book_on_shelf {
  book_id            String
  shelf_id           String
  personal_bookshelf bookshelf @relation("ShelfContain", fields: [shelf_id], references: [id])
  book               book      @relation("book_on_shelf", fields: [book_id], references: [id])
  create_at          DateTime  @default(now())
  update_at          DateTime  @updatedAt
  delete_flag        Boolean   @default(false)

  @@id([shelf_id, book_id])
}

// favorites table
model favorite {
  user           user_account @relation("Userfavorites", fields: [user_id], references: [id])
  user_id        String
  book           book         @relation("Bookfavorites", fields: [book_id], references: [id])
  book_id        String
  update_at      DateTime     @updatedAt
  delete_flag    Boolean      @default(false)
  @@id([user_id, book_id])
}


// discussion_threads table
model discussion_thread {
  id          String       @id @default(uuid()) @map("id")
  user        user_account @relation("Userdiscussion_thread", fields: [user_id], references: [id])
  user_id     String
  book        book         @relation("bookdiscussion_threads", fields: [book_id], references: [id])
  book_id     String
  title       String?
  content     String?
  create_at   DateTime     @default(now())
  update_at   DateTime     @updatedAt
  delete_flag Boolean      @default(false)
}

// advertisements table
model advertisement {
  id          String    @id @default(uuid()) @map("id")
  book_id     String
  title       String?
  content     String?
  image_url   String?
  expiry_date DateTime?
  update_at   DateTime  @updatedAt
  create_at   DateTime  @default(now())
  delete_flag Boolean   @default(false)
  book        book      @relation("advertisements", fields: [book_id], references: [id])
}

// ReadingHistories table
model reading_history {
  user_id     String
  book_id     String
  page_read   Int
  status      String?
  percentage  Float?
  update_at   DateTime     @updatedAt
  create_at   DateTime     @default(now())
  delete_flag Boolean      @default(false)
  user        user_account @relation("UserReadingHistories", fields: [user_id], references: [id])
  book        book         @relation("bookReadingHistories", fields: [book_id], references: [id])

  @@id([user_id, book_id])
}

// Define the model for the bookmarks table
model bookmark {
  id        String       @id @default(uuid()) @map("id")
  user      user_account @relation(fields: [user_id], references: [id])
  user_id   String
  book      book         @relation(fields: [book_id], references: [id])
  book_id   String
  page      Int
  create_at DateTime     @default(now())
  update_at DateTime     @updatedAt
  delete_flag Boolean   @default(false)
}
