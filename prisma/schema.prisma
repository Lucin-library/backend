generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// UserAccounts table
model UserAccount {
  id                   String             @id @default(uuid()) @map("id")
  email                String?            @unique
  password             String?
  fullName             String?
  profilePictureURL    String?
  contactInfo          String?
  birthDate            DateTime?
  gender               Int?
  userRating           Rating[]
  personalBookshelf    Bookshelf[]        @relation("PersonalBookShelf")
  userDiscussionThread DiscussionThread[] @relation("UserDiscussionThread")
  userFavorite         Favorite[]         @relation("UserFavorites")
  userHistories        ReadingHistory[]   @relation("UserReadingHistories")
  updateAt             DateTime?          @updatedAt
  createAt             DateTime?          @default(now())
  deleteFlag           Boolean?           @default(false)
}

// Authors table
model Author {
  id         String    @id @default(uuid()) @map("id")
  name       String
  birthDay   DateTime?
  biography  String?
  books      Book[]    @relation("AuthorBook")
  updateAt   DateTime  @updatedAt
  createAt   DateTime  @default(now())
  deleteFlag Boolean
}

// Books table
model Book {
  id                String             @id @default(uuid()) @map("id")
  title             String
  author            Author             @relation("AuthorBook", fields: [authorId], references: [id])
  authorId          String
  genre             String?
  publisher         String?
  publicationDate   DateTime?
  isBN              String?
  description       String?
  coverImageURL     String?
  userRating        Rating?
  bookPersonal      BookOnShelf[]      @relation("BookOnShelf")
  advertisement     Advertisement[]    @relation("Advertisements")
  discussionThreads DiscussionThread[] @relation("BookDiscussionThreads")
  bookHistories     ReadingHistory[]   @relation("BookReadingHistories")
  updateAt          DateTime           @updatedAt
  deleteFlag        Boolean            @default(false)
  createAt          DateTime           @default(now())
}

// UserRatings table
model Rating {
  userId     String
  bookId     String      @unique
  rating     Float
  reviewText String?
  dateRated  DateTime?
  updateAt   DateTime    @updatedAt
  deleteFlag Boolean     @default(false)
  bookRating Book        @relation(fields: [bookId], references: [id])
  user       UserAccount @relation(fields: [userId], references: [id])

  @@unique([userId, bookId])
}

// PersonalBookshelf table
model Bookshelf {
  id          String        @id @default(uuid()) @map("id")
  user        UserAccount   @relation("PersonalBookShelf", fields: [userId], references: [id])
  userId      String
  bookInShelf BookOnShelf[] @relation("ShelfContain")
  bookId      String
  status      String?
  name        String?
  updateAt    DateTime      @updatedAt
  createAt    DateTime      @default(now())
  deleteFlag  Boolean       @default(false)
}

model BookOnShelf {
  bookId            String
  shelfId           String
  personalBookshelf Bookshelf @relation("ShelfContain", fields: [shelfId], references: [id])
  book              Book      @relation("BookOnShelf", fields: [bookId], references: [id])
  createAt          DateTime  @default(now())
  updateAt          DateTime  @updatedAt
  deleteFlag        Boolean   @default(false)

  @@id([shelfId, bookId])
}

// Favorites table
model Favorite {
  id            String      @id @default(uuid()) @map("id")
  user          UserAccount @relation("UserFavorites", fields: [userId], references: [id])
  userId        String
  typeOF        String
  refFavoriteId String?
  updateAt      DateTime    @updatedAt
  deleteFlag    Boolean     @default(false)
}

// DiscussionThreads table
model DiscussionThread {
  id         String      @id @default(uuid()) @map("id")
  user       UserAccount @relation("UserDiscussionThread", fields: [userId], references: [id])
  userId     String
  book       Book        @relation("BookDiscussionThreads", fields: [bookId], references: [id])
  bookId     String
  parentId   String?     @map("parent_id")
  parent     DiscussionThread? @relation("ParentDiscussionThread", fields: [parentId], references: [id])
  childThreads DiscussionThread[] @relation("ParentDiscussionThread")
  content    String?
  createAt   DateTime    @default(now())
  updateAt   DateTime    @updatedAt
  deleteFlag Boolean     @default(false)
}

// Advertisements table
model Advertisement {
  id         String    @id @default(uuid()) @map("id")
  bookId     String
  title      String?
  content    String?
  imageURL   String?
  expiryDate DateTime?
  updateAt   DateTime  @updatedAt
  createAt   DateTime  @default(now())
  deleteFlag Boolean   @default(false)
  book       Book      @relation("Advertisements", fields: [bookId], references: [id])
}

// ReadingHistories table
model ReadingHistory {
  userId     String
  bookId     String
  pageRead   Int
  status     String?
  percentage Float?
  updateAt   DateTime    @updatedAt
  createAt   DateTime    @default(now())
  deleteFlag Boolean     @default(false)
  user       UserAccount @relation("UserReadingHistories", fields: [userId], references: [id])
  book       Book        @relation("BookReadingHistories", fields: [bookId], references: [id])

  @@id([userId, bookId])
}
